<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>animal_bee_bumble_giant_stand_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>DIRECTION_UP = 0;
DIRECTION_LEFT = 1;
DIRECTION_DOWN = 2;
DIRECTION_RIGHT = 3;

gridSize = 32;
moveSpeed = 4; // should be power of 2
isMoving = false;
moveTimer = 0;
facingDirection = 0;
nextDirection = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (isMoving == false &amp;&amp; nextDirection != -1) {
    isMoving = true;
    moveTimer = gridSize;
    facingDirection = nextDirection;
    nextDirection = -1;
}

if (isMoving == false) {
    if (keyboard_check(vk_up)) {
        isMoving = true;
        moveTimer = gridSize;
        facingDirection = DIRECTION_UP;
    }  
    
    if (keyboard_check(vk_left)) {
        isMoving = true;
        moveTimer = gridSize;
        facingDirection = DIRECTION_LEFT;
    }  
    
    if (keyboard_check(vk_down)) {
        isMoving = true;
        moveTimer = gridSize;
        facingDirection = DIRECTION_DOWN;
    }  
    
    if (keyboard_check(vk_right)) {
        isMoving = true;
        moveTimer = gridSize;
        facingDirection = DIRECTION_RIGHT;
    }  
} else {
    if (keyboard_check(vk_up) &amp;&amp; facingDirection != DIRECTION_UP) {
        nextDirection = DIRECTION_UP;
    } 
    
    if (keyboard_check(vk_left) &amp;&amp; facingDirection != DIRECTION_LEFT) {
        nextDirection = DIRECTION_LEFT;
    } 
    
    if (keyboard_check(vk_down) &amp;&amp; facingDirection != DIRECTION_DOWN) {
        nextDirection = DIRECTION_DOWN;
    } 
    
    if (keyboard_check(vk_right) &amp;&amp; facingDirection != DIRECTION_RIGHT) {
        nextDirection = DIRECTION_RIGHT;
    } 
}

if (isMoving == true) {
    speedX = 0;
    speedY = 0;
    
    if (facingDirection == DIRECTION_UP) {
        speedY = -moveSpeed;
    } else if (facingDirection == DIRECTION_LEFT) {
        speedX = -moveSpeed;
    } else if (facingDirection == DIRECTION_DOWN) {
        speedY = moveSpeed;
    } else if (facingDirection == DIRECTION_RIGHT) {
        speedX = moveSpeed;
    }
    
    x += speedX;
    y += speedY;
    
    moveTimer -= moveSpeed;
    if (moveTimer == 0) {
        isMoving = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
